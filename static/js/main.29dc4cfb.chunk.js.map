{"version":3,"sources":["URL.js","PangenomeSchematic.js","ComponentConnectorRect.js","SpanCell.js","utilities.js","ComponentRect.js","ComponentNucleotides.js","LinkColumn.js","LinkArrow.js","LinkRecord.js","App.js","NucleotideTooltip.js","ControlHeader.js","serviceWorker.js","ViewportInputsStore.js","index.js"],"names":["urlExists","dataName","http","XMLHttpRequest","open","send","status","theUrl","callback","a","xmlHttp","onreadystatechange","readyState","responseText","PangenomeSchematic","props","pathNames","components","jsonCache","nucleotides","loadIndexFile","store","jsonName","observe","chunkFastaURLs","loadFasta","jsonFilename","console","log","indexPath","process","fetch","then","res","json","setChunkIndex","filepath","Error","url","data","json_version","MediaError","this","path_names","processArray","path_fasta","response","text","sequence","replace","substr","push","addChunkProcessedFasta","chunksProcessed","length","chunkURLs","urlIndex","jsonChunk","num_components_already_loaded","index","entries","component","first_bin","componentItem","Component","addChunkProcessed","slice","React","columnX","x","compressedColumnX","compressedX","firstBin","lastBin","last_bin","arrivals","arrival","LinkColumn","departures","departure","relativePixelX","occupants","matrix","num_bin","useWidthCompression","linkColumn","upstream","downstream","participants","key","edgeToKey","String","padStart","ConnectorRect","state","color","y","width","height","fill","MatrixCell","event","relColumnX","Math","floor","max","evt","layerX","pixelsPerColumn","item","range","min","tooltipContent","pathName","ranges","j","start","end","updateCellTooltipContent","inverted","pixelsPerRow","align","verticalAlign","onMouseOver","onHover","bind","onMouseLeave","onLeave","undefined","copyNumber","copyNumberColorArray","invertedColorArray","onMouseMove","inversionText","SpanCell","row","iColumns","prev","spans","newSpan","i","column","map","span","rowNumber","sum","b","arraysEqual","A","B","every","e","indexOf","checkAndForceMinOrMaxValue","value","minValue","maxValue","isInt","isNaN","parseFloat","stringToColorAndOpacity","highlightedLinkColumn","selectedLink","whichLinkToConsider","colorKey","matchColor","stringToColourSave","toString","hash","charCodeAt","colour","getMax","arr","len","Infinity","ComponentRect","handleClick","setState","parts","entry","vertical_rank","row_n","renderMatrixRow","updateMaxHeight","verticalRank","uncompressed_y","this_y","useVerticalCompression","compressed_row_mapping","hasOwnProperty","parent","topOffset","connectorsColumn","yOffset","reduce","uncompressed_row","renderComponentConnector","uncompressedRow","x_val","binScalingFactor","widthInColumns","onClick","renderMatrix","useConnector","renderAllConnectors","ComponentNucleotides","listOfObjects","fontSize","handleMouseOut","handleMouseOver","updateHighlightedNode","Array","keys","v","pathIndex","contents","linkCells","y_coord","d","opacity","stroke","onMouseOut","isInfinity","n","Number","isFinite","LinkArrow","link","updateSelectedLink","arrowXCoord","points","xArrival","departureX","xDepart","arrX","turnDirection","departOrigin","departCorner","elevation","departTop","arriveTop","arriveCorner","arriveCornerEnd","abs","isArrival","some","calculatePoints","bezier","strokeWidth","stroke-opacity","pointerLength","pointerWidth","tension","LinkRecord","xCoordArrival","xCoordDeparture","calculateLinkCoordinates","schematic","leftXStart","index_to_component_to_visualize_dict","linkToXMapping","schematizeComponent","paddedKey","k","linkToXmapping","distanceSortedLinks","Object","values","sort","distance","top","elevationOccupied","record","linkBegin","linkEnd","reserveElevationAirSpace","calculateLinkElevations","NucleotideTooltip","MouseTooltip","visible","offsetX","offsetY","style","background","zIndex","cellToolTipContent","ControlHeader","percentage","beginBin","getBeginBin","endBin","getEndBin","size","diff","updateBeginEndBin","pathNucPos","path","nucPos","httpGetAsync","pathIndexServerAddress","result","alert","parseInt","newBeginBin","ceil","getBinWidth","target","options","selectedIndex","setIndexSelectedZoomLevel","indexSelZoomLevel","indexSelectedZoomLevel","availableZoomLevels","className","type","list","placeholder","onChange","updatePathNucPos","id","marginLeft","handleJump","defaultValue","tryJSONpath","title","decIndexSelectedZoomLevel","val","change_zoom_level","incIndexSelectedZoomLevel","shift","beginEndBin","readOnly","name","last_bin_pangenome","Fragment","updateHeight","updateWidth","href","rel","VerticalCompressedViewSwitch","checked","toggleUseVerticalCompression","RenderConnectorSwitch","toggleUseConnector","WidthCompressedViewSwitch","toggleUseWidthCompression","Legend","src","alt","position","bottom","left","App","layerRef","createRef","layerRef2","timerHighlightingLink","timerSelectionLink","componentDidMount","clientHeight","document","getElementById","getElementsByClassName","buttonsHeight","current","getCanvas","_canvas","linkRect","clearTimeout","highlightedLink","setTimeout","_updateHighlightedNode","update_state","binLeft","binRight","last_bin_last_visualized_component","end_closer","newEndBin","screenWidth","half","renderNucleotidesSchematic","loading","nt_shift","nucleotides_slice","schematize","actualWidth","fetchAllChunks","updateSchematicMetadata","openRelevantChunksFromIndex","recalcXLayout","recalcY","chunksProcessedFasta","render","firstFieldX","fieldX","getColumnX","_column_shift","chunkIndex","zoom_levels","setAvailableZoomLevels","window","innerWidth","selZoomLev","getSelectedZoomLevel","chunkURLarray","fileArrayFasta","level","get","ichunk","files","chunk","fasta","calculateEndBinFromScreen","fileArray","setLastBinPangenome","scaling_factor","round","prepareWhichComponentsToVisualize","URLprefix","filename","switchChunkFastaURLs","switchChunkURLs","chunkPath","jsonFetch","loadJsonCache","warn","all_visible","Set","c","add","sorted","from","row_mapping","count","compress_visible_rows","maxNumRowsAcrossComponents","calcMaxNumRowsAcrossComponents","setLoading","first_visualized_component","last_visualized_component","links","updateTopOffset","lengths","firstDepartureColumn","visibleHeightPixels","renderLinkColumn","leftPad","localColor","localOpacity","localStroke","renderComponent","renderLink","minWidth","leftOffset","ref","renderSortedLinks","loadingMessage","renderSchematic","Boolean","location","hostname","match","Chunk","types","model","file","string","maybeNull","integer","ZoomLevel","bin_width","array","ChunkIndex","pangenome_length","PathNucPos","optional","maximumHeightThisFrame","precIndexSelectedZoomLevel","actions","self","newBegin","newEnd","newTopOffset","isSafeInteger","updateHighlightedLink","latestHeight","resetRenderStats","newContents","updateBinScalingFactor","newFactor","arrayOfFile","singleChunk","singleChunkFasta","get_prec_zoom_level","views","create","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.29dc4cfb.chunk.js","sourcesContent":["/// a collection of functions to deal with URL requests\n\nexport function urlExists(dataName) {\n  if (dataName === \"\") {\n    return false;\n  } else {\n    //source: https://stackoverflow.com/a/22011478/3067894\n    var http = new XMLHttpRequest();\n      http.open(\"HEAD\", dataName, false);\n    http.send();\n    return http.status !== 404;\n  }\n}\n\nexport async function httpGetAsync(theUrl, callback) {\n  var xmlHttp = new XMLHttpRequest();\n  xmlHttp.onreadystatechange = function () {\n    if (xmlHttp.readyState === 4 && xmlHttp.status === 200)\n      callback(xmlHttp.responseText);\n  };\n  await xmlHttp.open(\"GET\", theUrl, true); // true for asynchronous\n  xmlHttp.send(null);\n}\n","import React from \"react\";\nimport { observe } from \"mobx\";\nimport { urlExists } from \"./URL\";\n\nclass PangenomeSchematic extends React.Component {\n  constructor(props) {\n    /*Only plain objects will be made observable. For non-plain objects it is considered the\n\t\t responsibility of the constructor to initialize the observable properties. Either use\n\t\t the @observable annotation or the extendObservable function.*/\n\n    super(props);\n    this.pathNames = [];\n    this.components = [];\n    this.jsonCache = {}; // URL keys, values are entire JSON file datas\n    // TODO: make jsonCache store React components and save them in mobx\n    // TODO: make FILO queue to remove old jsonCache once we hit max memory usage\n    this.nucleotides = []; // nucleotides attribute and its edges\n\n    this.loadIndexFile(this.props.store.jsonName); //initializes this.chunkIndex\n\n    //STEP #1: whenever jsonName changes, loadIndexFile\n    observe(this.props.store, \"jsonName\", () => {\n      this.loadIndexFile(this.props.store.jsonName);\n    });\n\n    // The FASTA files are read only when there are new chunks to read\n    observe(this.props.store.chunkFastaURLs, () => {\n      this.loadFasta();\n    });\n\n    //STEP #7: JsonCache causes processArray to update chunksProcessed\n    // observe(this.props.store.jsonCache,\n    //     this.processArray.bind(this));\n\n    // console.log(\"public \", process.env.PUBLIC_URL ) //PUBLIC_URL is empty\n  }\n  componentDidUpdate() {\n    // console.log(\"#components: \" + this.components);\n  }\n\n  loadIndexFile(jsonFilename) {\n    console.log(\"STEP #1: whenever jsonName changes, loadIndexFile\");\n\n    let indexPath =\n      process.env.REACT_APP_FETCH + jsonFilename + \"/bin2file.json\";\n    //console.log(\"loadIndexFile - START reading\", indexPath);\n\n    return fetch(indexPath)\n      .then((res) => res.json())\n      .then((json) => {\n        console.log(\"loadIndexFile - END reading\", indexPath);\n\n        //STEP #2: chunkIndex contents loaded\n        this.props.store.setChunkIndex(json);\n      });\n  }\n\n  jsonFetch(filepath) {\n    if (!filepath)\n      throw new Error(\n        \"No filepath given. Ensure chunknames in bin2file.json are correct.\"\n      );\n    console.log(\"Fetching\", filepath);\n    return fetch(filepath).then((res) => res.json());\n  }\n\n  loadJsonCache(url, data) {\n    console.log(\"STEP #6: fetched chunks go into loadJsonCache\");\n\n    if (data.json_version !== 17) {\n      throw MediaError(\n        \"Wrong Data JSON version: was expecting version 17, got \" +\n        data.json_version +\n        \".  \" +\n        \"This version added x and compressedX fields for the chunks too.  \" + // KEEP THIS UP TO DATE!\n          \"Using a mismatched data file and renderer will cause unpredictable behavior,\" +\n          \" instead generate a new data file using github.com/graph-genome/component_segmentation.\"\n      );\n    }\n    this.jsonCache[url] = data;\n    this.pathNames = data.path_names; //TODO: in later JSON versions path_names gets moved to bin2file.json\n    //console.log(this.pathNames.length, \" path names loaded\");\n    this.processArray();\n  }\n\n  loadFasta() {\n    console.log(\"loadFasta\");\n\n    // Clear the nucleotides information\n    this.nucleotides = [];\n\n    // This loop will automatically cap out at the fasta file corrisponding to the last loaded chunk\n    for (let path_fasta of this.props.store.chunkFastaURLs) {\n      if (urlExists(path_fasta)) {\n        //console.log(\"loadFasta - START: \", path_fasta);\n\n        fetch(path_fasta)\n          .then((response) => {\n            return response.text();\n          })\n          .then((text) => {\n            const sequence = text\n              .replace(/.*/, \"\")\n              .substr(1)\n              .replace(/[\\r\\n]+/gm, \"\");\n\n            //split into array of nucleotides\n            this.nucleotides.push(...sequence);\n\n            //console.log(\"loadFasta - END: \", path_fasta);\n            this.props.store.addChunkProcessedFasta(path_fasta);\n          });\n      }\n    }\n  }\n\n  /**Parses beginBin to endBin range, returns false if new file needed.\n   * This calculates the pre-render for all contiguous JSON data.\n   * State information is stored in store.chunksProcessed.\n   * Checks if there's new available data to pre-render in processArray()\n   * run through list of urls in order and see if we have data to load.**/\n  processArray() {\n    //TODO: make processArray parallelized by placing outputs in a Key Map and rendering out of order\n    console.log(\n      \"STEP #7: JsonCache causes processArray to update chunksProcessed\"\n    );\n    const store = this.props.store;\n\n    if (\n      store.chunksProcessed.length === 0 ||\n      store.chunksProcessed[0] !== store.chunkURLs[0]\n    ) {\n      this.components = []; // clear all pre-render data\n    }\n\n    // may have additional chunks to pre-render\n    //console.log(\"processArray - parsing components \", store.getBeginBin(), \" - \", store.getEndBin());\n\n    for (let urlIndex = 0; urlIndex < store.chunkURLs.length; urlIndex++) {\n      //if end of pre-render is earlier than end of contiguous available chunks, process new data\n      if (urlIndex >= store.chunksProcessed.length) {\n        //only process if data is available\n        if (store.chunkURLs[urlIndex] in this.jsonCache) {\n          let url = store.chunkURLs[urlIndex];\n          let jsonChunk = this.jsonCache[url];\n\n          // At the moment, the index is used as a rank of the component, then it has to be progressive between chunks\n          const num_components_already_loaded =\n            this.components.length > 0\n              ? this.components[this.components.length - 1].index + 1\n              : 0;\n          for (const [index, component] of jsonChunk.components.entries()) {\n            if (component.first_bin > 0) {\n              let componentItem = new Component(\n                component,\n                num_components_already_loaded + index\n              );\n              this.components.push(componentItem); //TODO: concurrent modification?\n              //if (component.last_bin >= beginBin) { NOTE: we are now reading in whole chunk, this may place\n              //xOffset further right than it was intended when beginBin > chunk.first_bin\n            }\n          }\n          store.addChunkProcessed(url);\n        } else {\n          //we've run into a contiguous chunk that is not available yet\n          return false;\n        }\n      }\n    }\n\n    console.log(\n      \"processArray\",\n      store.chunksProcessed[0],\n      store.chunksProcessed.slice(-1)[0],\n      \"out of\",\n      this.props.store.chunkURLs.length,\n      \"chunks\"\n    );\n    //console.log(this.props)\n\n    return true; //store.chunksProcessed.length > 0;\n  }\n}\n\nclass Component {\n  //extends React.Component{\n  constructor(component, index) {\n    this.columnX = component.x;\n    this.compressedColumnX = component.compressedX;\n\n    this.index = index;\n    this.firstBin = component.first_bin;\n    this.lastBin = component.last_bin;\n\n    this.arrivals = [];\n    for (let arrival of component.arrivals) {\n      this.arrivals.push(new LinkColumn(arrival));\n    }\n    this.departures = [];\n    for (let departure of component.departures) {\n      //don't slice off adjacent here\n      this.departures.push(new LinkColumn(departure));\n    }\n\n    this.relativePixelX = -1;\n\n    // deep copy of occupants\n    this.occupants = component.occupants; //Array.from(\n    this.matrix = component.matrix; // Array.from(\n    this.num_bin = this.lastBin - this.firstBin + 1;\n  }\n\n  getColumnX(useWidthCompression) {\n    return useWidthCompression ? this.compressedColumnX : this.columnX;\n  }\n}\n\nclass LinkColumn {\n  constructor(linkColumn) {\n    this.upstream = linkColumn.upstream;\n    this.downstream = linkColumn.downstream;\n    this.participants = linkColumn.participants; //new Set\n    this.key = this.edgeToKey();\n  }\n  edgeToKey() {\n    /**downstream and upstream are always in the same orientation regardless of if it is a\n     * departing LinkColumn or an arriving LinkColumn.**/\n    return (\n      String(this.downstream).padStart(13, \"0\") +\n      String(this.upstream).padStart(13, \"0\")\n    );\n  }\n}\n\nexport default PangenomeSchematic;\n","import React from \"react\";\nimport {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nexport class ConnectorRect extends React.Component {\n  state = {\n    color: this.props.color,\n  };\n\n  render() {\n    return (\n      <Rect\n        x={this.props.x}\n        y={this.props.y}\n        width={this.props.width}\n        height={this.props.height || 1}\n        fill={this.state.color}\n      />\n    );\n  }\n}\n\nConnectorRect.propTypes = {\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  store: PropTypes.node,\n  color: PropTypes.node,\n};\n","import React from \"react\";\nimport { Rect, Text } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nexport class MatrixCell extends React.Component {\n  onHover(event) {\n    //tooltip: this.props.item.mean_pos\n\n    // An example: Path_name, Coverage: 0.23, Inversion: 0.0, Pos: 2365-27289\n\n    //TODO: calculate relative X and select item from this.props.range\n    let relColumnX = Math.floor(\n      Math.max(0, event.evt.layerX - this.props.x) /\n        this.props.store.pixelsPerColumn\n    );\n    //console.log(event, this.props.range, relColumnX);\n\n    let item = this.props.range[\n      Math.min(this.props.range.length - 1, relColumnX)\n    ];\n    let tooltipContent = '\"';\n    tooltipContent +=\n      this.props.pathName +\n      '\"\\nCoverage: ' +\n      item[0] +\n      \"\\nInversion: \" +\n      item[1] +\n      \"\\nPos: \";\n\n    const ranges = item[2];\n    for (let j = 0; j < ranges.length; j++) {\n      let start = ranges[j][0];\n      let end = ranges[j][1];\n      if (j === 0) {\n        tooltipContent += start + \"-\" + end;\n      } else {\n        tooltipContent += \",\" + start + \"-\" + end;\n      }\n    }\n    this.props.store.updateCellTooltipContent(tooltipContent); //item[2] is array of ranges\n  }\n\n  onLeave() {\n    this.props.store.updateCellTooltipContent(\"\"); // we don't want any tooltip displayed if we leave the cell\n  }\n\n  /**Reduced number of Text elements generated for inversions,\n   * mouse events restored**/\n  inversionText(inverted) {\n    if (this.props.store.pixelsPerRow > 9 && inverted) {\n      return (\n        <Text\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height || 1}\n          align={\"center\"}\n          verticalAlign={\"center\"}\n          text={inverted ? \"<\" : \" \"}\n          onMouseOver={this.onHover.bind(this)}\n          onMouseLeave={this.onLeave.bind(this)}\n        />\n      );\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    if (this.props.range === undefined || this.props.range.length === 0) {\n      return null; //giving up\n    }\n    const inverted = this.props.range[0][1] > 0.5;\n    const copyNumber = this.props.range[0][0];\n\n    let color = \"#838383\";\n\n    if (copyNumber > 1 && !inverted) {\n      // 11 items is number of colors in copyNumberColorArray\n      if (copyNumber < 10) {\n        color = this.props.store.copyNumberColorArray[copyNumber];\n      } else {\n        color = this.props.store.copyNumberColorArray[10];\n      }\n    }\n\n    if (inverted) {\n      // 11 items is number of colors in invertedColorArray\n      if (copyNumber < 10) {\n        color = this.props.store.invertedColorArray[copyNumber];\n      } else {\n        color = this.props.store.invertedColorArray[10];\n      }\n    }\n\n    // TODO: if possible, use HTML/CSS to write the '<', avoiding the <Text />s rendering, therefore improving the performance\n    return (\n      <>\n        <Rect\n          x={this.props.x}\n          y={this.props.y}\n          width={this.props.width}\n          height={this.props.height || 1}\n          fill={color}\n          onMouseMove={this.onHover.bind(this)}\n          onMouseLeave={this.onLeave.bind(this)}\n        />\n        {this.inversionText(inverted)}\n      </>\n    );\n  }\n}\n\nMatrixCell.propTypes = {\n  store: PropTypes.object,\n  range: PropTypes.object,\n  x: PropTypes.number,\n  y: PropTypes.number,\n  width: PropTypes.number,\n  height: PropTypes.number,\n  color: PropTypes.node,\n  pathName: PropTypes.node,\n};\n\nexport class SpanCell extends React.Component {\n  constructor(props) {\n    super(props);\n    this.width = props.row.length;\n    //https://github.com/graph-genome/Schematize/issues/87\n    //Sparse matrix includes the relative columns for each bin inside a component\n    //Columns are not necessarily contiguous, but follow the same order as `row`\n  }\n\n  render() {\n    if (!this.props.row.length || !this.props.iColumns.length) {\n      return null;\n    }\n    let prev = this.props.iColumns[0] - 1;\n    let spans = [];\n    let newSpan = { width: 0, x: this.props.iColumns[0], range: [] };\n    for (let i = 0; i < this.props.iColumns.length; i++) {\n      let column = this.props.iColumns[i];\n      if (column === prev + 1) {\n        //contiguous\n        newSpan.width += 1;\n        newSpan.range.push(this.props.row[i]);\n      } else {\n        //non-contiguous\n        spans.push(newSpan);\n        //create new newSpan\n        newSpan = { width: 1, x: column, range: [this.props.row[i]] };\n      }\n      prev = column;\n    }\n    spans.push(newSpan);\n    return (\n      <>\n        {spans.map((span) => (\n          <MatrixCell\n            key={\"span\" + this.props.rowNumber + \",\" + span.x}\n            range={span.range}\n            store={this.props.store}\n            pathName={this.props.pathName}\n            x={this.props.x + span.x * this.props.store.pixelsPerColumn}\n            y={this.props.y}\n            rowNumber={this.props.rowNumber}\n            width={span.width * this.props.store.pixelsPerColumn}\n            height={this.props.store.pixelsPerRow}\n          />\n        ))}\n      </>\n    );\n  }\n}\n\nMatrixCell.propTypes = {\n  row: PropTypes.node,\n  iColumns: PropTypes.node,\n  parent: PropTypes.object,\n  store: PropTypes.object,\n  pathName: PropTypes.node,\n  y: PropTypes.number,\n  rowNumber: PropTypes.number,\n  verticalRank: PropTypes.number,\n};\n","export const zip = (arr, ...arrs) => {\n  /*Credit: https://gist.github.com/renaudtertrais/25fc5a2e64fe5d0e86894094c6989e10*/\n  return arr.map((val, i) => arrs.reduce((a, arr) => [...a, arr[i]], [val]));\n};\n\nexport function sum(a, b) {\n  return a + b;\n}\n\nexport function arraysEqual(A, B) {\n  return (\n    (A.length === 0 && B.length === 0) ||\n    (A.length === B.length && A.every((e) => B.indexOf(e) > -1))\n  );\n}\n\nexport function checkAndForceMinOrMaxValue(value, minValue, maxValue) {\n  if (value < minValue) {\n    value = minValue;\n  } else if (value > maxValue) {\n    value = maxValue;\n  }\n\n  return value;\n}\n\nexport function areOverlapping(startA, endA, startB, endB) {\n  if (startB < startA) {\n    return endB >= startA;\n  } else if (startB > startA) {\n    return startB <= endA;\n  } else {\n    return true;\n  }\n}\n\n// Short-circuiting, and saving a parse operation\nexport function isInt(value) {\n  var x;\n  if (isNaN(value)) {\n    return false;\n  }\n  x = parseFloat(value);\n  return (x | 0) === x;\n}\n\nexport function calculateEndBinFromScreen(\n  beginBin,\n  selZoomLev,\n  store,\n  widthInColumns\n) {\n  //console.log(\"calculateEndBinFromScreen: widthInColumns --> \" + widthInColumns);\n\n  let chunkURLarray = [];\n  let fileArrayFasta = [];\n\n  let firstFieldX = -1;\n\n  const level = store.chunkIndex.zoom_levels.get(selZoomLev);\n  //this loop will automatically cap out at the last bin of the file\n  for (let ichunk = 0; ichunk < level.files.length; ichunk++) {\n    // The \"x\" info is not here\n    const chunk = level.files[ichunk];\n\n    //if (areOverlapping(beginBin, endBin, chunk.first_bin, chunk.last_bin)){\n    if (chunk.last_bin >= beginBin) {\n      const fieldX = store.useWidthCompression ? chunk.compressedX : chunk.x;\n\n      if (firstFieldX === -1) {\n        firstFieldX = fieldX;\n      }\n\n      /*console.log(\"fieldX: \" + fieldX);\n      console.log('fieldX - firstFieldX: ' + (fieldX - firstFieldX))\n      console.log(\"chunk.last_bin: \" + chunk.last_bin);*/\n\n      chunkURLarray.push(chunk[\"file\"]);\n      if (chunk.fasta !== null) {\n        fileArrayFasta.push(chunk.fasta);\n      }\n\n      // If the new chunck is outside the windows, the chunk-pushing is over\n      if (fieldX - firstFieldX >= widthInColumns) {\n        break;\n      }\n    }\n  }\n\n  // store.updateBeginEndBin(b, b + widthInColumns);\n  //TODO the logic in let width = could be much more complex by looking at\n  //width of components and whether various settings are on.  The consequence\n  //of overestimating widthInColumns is to make the shift buttons step too big\n  return [chunkURLarray, fileArrayFasta];\n}\n\nexport function range(start, end) {\n  return [...Array(1 + end - start).keys()].map((v) => start + v);\n}\n\nexport function stringToColorAndOpacity(\n  linkColumn,\n  highlightedLinkColumn,\n  selectedLink\n) {\n  const whichLinkToConsider = selectedLink\n    ? selectedLink\n    : highlightedLinkColumn;\n\n  const colorKey = (linkColumn.downstream + 1) * (linkColumn.upstream + 1);\n  if (whichLinkToConsider) {\n    // When the mouse in on a Link, all the other ones will become gray and fade out\n    let matchColor =\n      (whichLinkToConsider.downstream + 1) * (whichLinkToConsider.upstream + 1);\n    // Check if the mouse in on a Link (highlightedLinkColumn) or if a Link was clicked (selectedLink)\n    if ((!highlightedLinkColumn && !selectedLink) || colorKey === matchColor) {\n      return [\n        stringToColourSave(colorKey),\n        1.0,\n        highlightedLinkColumn || selectedLink ? \"black\" : null,\n      ];\n    } else {\n      return [\"gray\", 0.3, null];\n    }\n  } else {\n    return [stringToColourSave(colorKey), 1.0, null];\n  }\n}\n\nexport function stringToColourSave(colorKey) {\n  colorKey = colorKey.toString();\n  let hash = 0;\n  for (let i = 0; i < colorKey.length; i++) {\n    hash = colorKey.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  let colour = \"#\";\n  for (let j = 0; j < 3; j++) {\n    const value = (hash >> (j * 8)) & 0xff;\n    colour += (\"00\" + value.toString(16)).substr(-2);\n  }\n  return colour;\n}\n\n// From https://stackoverflow.com/questions/42623071/maximum-call-stack-size-exceeded-with-math-min-and-math-max/52613386#52613386\n// Not-recursive implementation of Math.max to avoid 'RangeError: Maximum call stack size exceeded' for big arrays\nexport function getMax(arr) {\n  let len = arr.length;\n  let max = -Infinity;\n\n  while (len--) {\n    max = arr[len] > max ? arr[len] : max;\n  }\n  return max;\n}\n","/* eslint-disable require-jsdoc */\nimport React from \"react\";\nimport { Rect } from \"react-konva\";\nimport { ConnectorRect } from \"./ComponentConnectorRect\";\nimport { SpanCell } from \"./SpanCell\";\nimport PropTypes from \"prop-types\";\nimport { sum } from \"./utilities\";\n\nexport function compress_visible_rows(components) {\n  /*Returns a Map with key of the original row number and value of the new, compressed row number.\n   * Use this for y values of occupancy and LinkColumn cells.  */\n  let all_visible = new Set();\n  for (let c of components) {\n    for (let row of c.occupants) {\n      all_visible.add(row);\n    }\n  }\n  let sorted = Array.from(all_visible).sort();\n  let row_mapping = {};\n  for (let [count, index] of sorted.entries()) {\n    row_mapping[index] = count;\n  }\n  return row_mapping;\n}\n\nclass ComponentRect extends React.Component {\n  state = {\n    color: \"lightgray\",\n  };\n\n  handleClick = () => {\n    if (this.state.color === \"lightgray\") {\n      this.setState({ color: \"lightblue\" });\n    } else if (this.state.color === \"lightblue\") {\n      this.setState({ color: \"lightgray\" });\n    }\n  };\n\n  renderMatrix() {\n    let parts = this.props.item.matrix.map((entry, vertical_rank) => {\n      let row_n = entry[0];\n      return this.renderMatrixRow(entry[1], vertical_rank, row_n);\n    });\n    this.props.store.updateMaxHeight(this.props.item.occupants.length); //Set max observed occupants in mobx store for render height\n    return <>{parts}</>;\n  }\n\n  renderMatrixRow(entry, verticalRank, uncompressed_y) {\n    let this_y = verticalRank;\n    if (!this.props.store.useVerticalCompression) {\n      if (!this.props.compressed_row_mapping.hasOwnProperty(uncompressed_y)) {\n        return null; // we need compressed_y and we don't have it.  give up\n      }\n      this_y = this.props.compressed_row_mapping[uncompressed_y];\n    }\n    return (\n      <SpanCell\n        key={\"occupant\" + uncompressed_y}\n        row={entry[1]}\n        iColumns={entry[0]}\n        parent={this.props.item}\n        store={this.props.store}\n        pathName={this.props.pathNames[uncompressed_y]}\n        x={\n          this.props.item.relativePixelX +\n          this.props.item.arrivals.length * this.props.store.pixelsPerColumn\n        }\n        y={this_y * this.props.store.pixelsPerRow + this.props.store.topOffset}\n        rowNumber={uncompressed_y}\n        verticalRank={verticalRank}\n      />\n    );\n  }\n\n  renderAllConnectors() {\n    const departures = this.props.item.departures;\n    let connectorsColumn = departures.slice(-1)[0];\n    if (connectorsColumn !== undefined) {\n      //count starts at the sum(sum(departure columns)) so that it's clear\n      // adjacent connectors are alternatives to LinkColumns\n      //offset the y to start below link columns when using vertical compression\n      let yOffset = departures\n        .slice(0, -1)\n        .map((column) => {\n          return column.participants.length;\n        })\n        .reduce(sum, 0); // sum of trues in all columns\n      return (\n        <>\n          {connectorsColumn.participants.map((uncompressed_row) => {\n            yOffset++; // only used in vertical compression\n            return this.renderComponentConnector(yOffset, uncompressed_row);\n          })}\n        </>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  renderComponentConnector(verticalRank, uncompressedRow) {\n    let component = this.props.item;\n    // x is the (num_bins + num_arrivals + num_departures)*pixelsPerColumn\n    const x_val =\n      component.relativePixelX +\n      (component.arrivals.length +\n        (this.props.store.useWidthCompression\n          ? this.props.store.binScalingFactor\n          : component.num_bin) +\n        component.departures.length -\n        1) *\n        this.props.store.pixelsPerColumn;\n    let this_y = verticalRank;\n    if (!this.props.store.useVerticalCompression) {\n      this_y = this.props.compressed_row_mapping[uncompressedRow];\n    }\n    return (\n      <ConnectorRect\n        key={\"connector\" + uncompressedRow}\n        x={x_val}\n        y={this.props.store.topOffset + this_y * this.props.store.pixelsPerRow}\n        width={this.props.store.pixelsPerColumn} //Clarified and corrected adjacent connectors as based on pixelsPerColumn width #9\n        height={this.props.store.pixelsPerRow}\n        color={\"#AAAABE\"}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <>\n        <Rect\n          x={this.props.item.relativePixelX}\n          y={this.props.store.topOffset}\n          key={this.state.key + \"R\"}\n          width={this.props.widthInColumns * this.props.store.pixelsPerColumn}\n          height={this.props.height - 2} //TODO: change to compressed height\n          fill={this.state.color}\n          onClick={this.handleClick}\n          onMouseOver={this.onHover.bind(this)}\n          onMouseLeave={this.onLeave.bind(this)}\n        />\n        {!this.props.store.useWidthCompression ? this.renderMatrix() : null}\n        {this.props.store.useConnector ? this.renderAllConnectors() : null}\n      </>\n    );\n  }\n\n  onHover() {\n    this.props.store.updateCellTooltipContent(\n      \"Bin range: \" + this.props.item.firstBin + \" - \" + this.props.item.lastBin\n    );\n  }\n\n  onLeave() {\n    this.props.store.updateCellTooltipContent(\"\");\n  }\n}\n\nComponentRect.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n  compressed_row_mapping: PropTypes.object,\n  widthInColumns: PropTypes.number,\n  height: PropTypes.number,\n  pathNames: PropTypes.node,\n};\n\nexport default ComponentRect;\n","import React from \"react\";\nimport { Text } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nclass ComponentNucleotides extends React.Component {\n  renderMatrixRow() {\n    const parent = this.props.item;\n    const x_val =\n      parent.relativePixelX +\n      parent.arrivals.length * this.props.store.pixelsPerColumn;\n\n    //console.log('x_val: ' + x_val)\n\n    var listOfObjects = [];\n    for (var x = 0; x < this.props.item.num_bin; x++) {\n      listOfObjects.push(\n        <Text\n          key={\"nuc_text\" + x}\n          x={x_val + x * this.props.store.pixelsPerColumn}\n          y={this.props.store.topOffset - this.props.store.pixelsPerColumn}\n          text={this.props.nucleotides[x]}\n          align=\"center\"\n          height={this.props.store.pixelsPerColumn}\n          width={this.props.store.pixelsPerColumn}\n          fontSize={this.props.store.pixelsPerColumn + 2}\n        />\n      );\n    }\n    return listOfObjects;\n  }\n\n  render() {\n    //console.log('ComponentNucleotides - render')\n    return this.renderMatrixRow();\n  }\n}\n\nComponentNucleotides.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n};\n\nexport default ComponentNucleotides;\n","import React from \"react\";\nimport {Rect} from \"react-konva\";\nimport PropTypes from \"prop-types\";\nimport {range} from \"./utilities\";\n\nclass LinkColumn extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n  handleMouseOver() {\n    this.props.updateHighlightedNode(this.props.item);\n  }\n  handleMouseOut() {\n    this.props.updateHighlightedNode(null);\n  }\n  linkCells() {\n      if (!this.props.store.useVerticalCompression) { //regular layout\n          return this.props.item.participants.map((pathIndex) =>\n              this.props.compressed_row_mapping[pathIndex] * this.props.store.pixelsPerRow);\n      }\n      //else, just stack each up at the top of the screen\n      return range(0, this.props.item.participants.length).map(\n          (y) => y * this.props.store.pixelsPerRow);\n  }\n  componentDidMount() {\n    this.setState({\n      color: this.props.color,\n    });\n  }\n  render() {\n    const contents = this.linkCells();\n    return (\n      <>\n        {contents.map((y_coord, d) => {\n          return (\n            <Rect\n              key={\"dot\" + d}\n              x={this.props.x}\n              y={\n                this.props.store.topOffset +\n                y_coord\n              }\n              width={this.props.store.pixelsPerColumn}\n              height={this.props.store.pixelsPerRow}\n              fill={this.props.color}\n              opacity={this.props.opacity}\n              stroke={this.props.stroke}\n              // onClick={this.handleClick}\n              onMouseOver={this.handleMouseOver}\n              onMouseOut={this.handleMouseOut}\n            />\n          );\n        })}\n      </>\n    );\n  }\n}\n\nLinkColumn.propTypes = {\n  store: PropTypes.object,\n  item: PropTypes.object,\n  updateHighlightedNode: PropTypes.func,\n  compressed_row_mapping: PropTypes.object,\n  x: PropTypes.node,\n  column: PropTypes.node,\n  color: PropTypes.node,\n};\n\nexport default LinkColumn;\n","import React from \"react\";\nimport { Arrow } from \"react-konva\";\nimport PropTypes from \"prop-types\";\n\nfunction isInfinity(n) {\n  return !Number.isFinite(n);\n}\n\nclass LinkArrow extends React.Component {\n  /** Serves as a contract to store visual layout information**/\n  constructor(props) {\n    super(props);\n    this.arrowXCoord = null;\n    this.points = [];\n    this.handleMouseOut = this.handleMouseOut.bind(this);\n    this.handleMouseOver = this.handleMouseOver.bind(this);\n  }\n  componentDidUpdate() {\n    //this.calculatePoints();\n  }\n\n  calculatePoints() {\n    /*Translates the LinkRecord coordinates into pixels and defines the curve shape.\n     * I've spent way too long fiddling with these numbers at different pixelsPerColumn\n     * I suggest you don't fiddle with them unless you plan on nesting the React\n     * Components to ensure that everything is relative coordinates.*/\n    let link = this.props.link;\n    this.arrowXCoord = this.props.link.xArrival;\n    let absDepartureX = this.props.link.xDepart;\n    // put in relative coordinates to arriving LinkColumn\n    let departureX =\n      absDepartureX - this.arrowXCoord + this.props.store.pixelsPerColumn / 2;\n    let arrX = this.props.store.pixelsPerColumn / 2;\n    let bottom = -2; //-this.props.store.pixelsPerColumn;\n    let turnDirection = departureX < 0 ? -1 : 1;\n    const departOrigin = [departureX, this.props.store.pixelsPerColumn - 2];\n    const departCorner = [departureX - turnDirection, -link.elevation + 2];\n    let departTop = [departureX - turnDirection * 6, -link.elevation];\n    let arriveTop = [arrX + turnDirection * 6, -link.elevation];\n    let arriveCorner = [arrX + turnDirection, -link.elevation + 2]; // 1.5 in from actual corner\n    const arriveCornerEnd = [arrX, -5];\n    this.points = [\n      departOrigin[0],\n      departOrigin[1],\n      departCorner[0],\n      departCorner[1],\n      departTop[0],\n      departTop[1],\n      arriveTop[0],\n      arriveTop[1],\n      arriveCorner[0],\n      arriveCorner[1],\n      arriveCornerEnd[0],\n      arriveCornerEnd[1],\n      arrX,\n      -1,\n    ];\n    if (Math.abs(departureX) <= this.props.store.pixelsPerColumn) {\n      // FIXME Small distances, usually self loops\n      if (link.isArrival) {\n        this.points = [\n          arrX,\n          -10, //-link.elevation - 4,\n          arrX,\n          bottom,\n        ];\n      } else {\n        this.points = [\n          departOrigin[0],\n          bottom + this.props.store.pixelsPerColumn,\n          departOrigin[0],\n          -5,\n        ]; //-link.elevation-this.props.store.pixelsPerColumn*2,];\n      }\n    }\n    if (this.points.some(isNaN) || this.points.some(isInfinity)) {\n      console.log(\"Some points are NaN: \" + this.points);\n    }\n  }\n\n  render() {\n    // if(this.arrowXCoord === null){\n    this.calculatePoints();\n    // }\n    /*upstream={this.props.upstream}\n        downstream={this.props.downstream}\n        */\n\n    return (\n      <Arrow\n        x={this.arrowXCoord}\n        y={this.props.store.topOffset - this.props.store.pixelsPerColumn}\n        width={this.props.store.pixelsPerColumn}\n        points={this.points}\n        bezier={false}\n        strokeWidth={this.props.store.pixelsPerColumn}\n        fill={this.props.color}\n        stroke={this.props.color}\n        opacity={this.props.opacity}\n        stroke-opacity={this.props.opacity}\n        pointerLength={1}\n        pointerWidth={1}\n        tension={1 / 3}\n        onMouseOver={this.handleMouseOver}\n        onMouseOut={this.handleMouseOut}\n        onClick={this.handleClick}\n        // lineCap={'round'}\n      />\n    );\n  }\n\n  handleMouseOver = () => {\n    this.props.store.updateCellTooltipContent(\n      \"Bin upstream: \" +\n        this.props.link.linkColumn.upstream +\n        \"\\nBin downstream: \" +\n        this.props.link.linkColumn.downstream\n    );\n\n    this.props.updateHighlightedNode(this.props.link.linkColumn);\n  };\n  handleMouseOut = () => {\n    this.props.store.updateCellTooltipContent(\"\");\n\n    this.props.updateHighlightedNode(null);\n  };\n  handleClick = (event) => {\n    console.log(\"Click\", event, this.props.link);\n\n    this.props.updateSelectedLink(this.props.link.linkColumn);\n  };\n}\n\nLinkArrow.propTypes = {\n  store: PropTypes.object,\n  link: PropTypes.object,\n  color: PropTypes.node,\n};\n\nexport default LinkArrow;\n","import { getMax } from \"./utilities\";\n\nexport class LinkRecord {\n  constructor(linkColumn, xCoordArrival = 0, xCoordDeparture = 0, isArrival) {\n    this.linkColumn = linkColumn;\n    if (linkColumn === undefined) {\n      console.log(linkColumn, xCoordArrival, xCoordDeparture);\n    }\n    this.xArrival = xCoordArrival;\n    this.xDepart = xCoordDeparture;\n    this.elevation = 10;\n    this.isArrival = isArrival;\n  }\n  distance() {\n    return Math.abs(this.xDepart - this.xArrival) || 1;\n  }\n}\n\nexport function calculateLinkCoordinates(\n  schematic,\n  pixelsPerColumn,\n  topOffset,\n  useWidthCompression,\n  binScalingFactor,\n  leftXStart,\n  index_to_component_to_visualize_dict\n) {\n  //leftXStart is necessary as a method at the moment\n  /** calculate the x coordinates of all components\n   * calculate the x coordinates of all arrivals and departures */\n\n  /* In this dictionary the key is the global unique paddedKey created by @edgetoKey.\n    The value is a list of size 2:\n    1. Element: the x-coordinate of the arrival link column\n    2. Element: the x-coordinate of the corresponding departure link column */\n  let linkToXMapping = {}; //(paddedKey): [arrivalX, departureX]\n\n  for (let i = 0; i < schematic.length; i++) {\n    let schematizeComponent = schematic[i];\n\n    if (schematizeComponent.index in index_to_component_to_visualize_dict) {\n      //schematizeComponent.relativePixelX = leftXStart(schematizeComponent, i, 0, 0);\n      //ARRIVALS: Calculate all X\n      for (let j = 0; j < schematizeComponent.arrivals.length; j++) {\n        let arrival = schematizeComponent.arrivals[j];\n        let xCoordArrival = leftXStart(schematizeComponent, i, 0, j);\n        let paddedKey = arrival.key;\n        if (!(paddedKey in linkToXMapping)) {\n          //place holder value, go as far right as possible\n          // TODO place holder value in the same place\n          linkToXMapping[paddedKey] = new LinkRecord(\n            arrival,\n            xCoordArrival,\n            xCoordArrival,\n            true\n          );\n        } else {\n          linkToXMapping[paddedKey].xArrival = xCoordArrival; // set with real value\n        }\n      }\n      //DEPARTURES: Calculate all X\n      for (let k = 0; k < schematizeComponent.departures.length - 1; k++) {\n        let departure = schematizeComponent.departures[k];\n        let xCoordDeparture = leftXStart(\n          schematizeComponent,\n          i,\n          schematizeComponent.arrivals.length +\n            (useWidthCompression\n              ? binScalingFactor\n              : schematizeComponent.num_bin),\n          k\n        );\n        let paddedKey = departure.key;\n        if (!(paddedKey in linkToXMapping)) {\n          //place holder value, go as far left as possible\n          // linkToXMapping[paddedKey] = [this.state.actualWidth + 100, xCoordDeparture]\n          linkToXMapping[paddedKey] = new LinkRecord(\n            departure,\n            xCoordDeparture,\n            xCoordDeparture,\n            false\n          );\n        } else {\n          linkToXMapping[paddedKey].xDepart = xCoordDeparture; // set real value\n        }\n      }\n    }\n  }\n  return calculateLinkElevations(linkToXMapping, pixelsPerColumn, topOffset);\n}\n\nfunction calculateLinkElevations(linkToXmapping, pixelsPerColumn, topOffset) {\n  /**Starting with the shortest links, claim a spot of elevation to place the link in.\n   * As the links get bigger, you take the max() of the range of the link and add 1.\n   * This claims the \"air space\" for that link to travel through without colliding with anything.\n   * The longest link should end up on top.  We'll probably need a \"link gutter\" maximum to keep\n   * this from getting unreasonably tall.**/\n  const distanceSortedLinks = Object.values(linkToXmapping).sort(\n    (a, b) => a.distance() - b.distance()\n  );\n  const elevationOccupied = reserveElevationAirSpace(\n    distanceSortedLinks,\n    pixelsPerColumn,\n    topOffset\n  );\n  const top = getMax(elevationOccupied) + pixelsPerColumn * 3;\n\n  return [distanceSortedLinks, top];\n}\n\nfunction reserveElevationAirSpace(\n  distanceSortedLinks,\n  pixelsPerColumn,\n  topOffset\n) {\n  /* Set up an array of zeros, then gradually fill it with height stacking\n   * @Simon this section is largely done, it just needs a sorted distanceSortedLinks as input*/\n\n  const length = Math.max(\n    0,\n    getMax(distanceSortedLinks.map((x) => Math.max(x.xDepart, x.xArrival)))\n  );\n\n  let elevationOccupied = new Array(length).fill(15);\n  for (let record of distanceSortedLinks) {\n    let linkBegin = Math.max(0, Math.min(record.xArrival, record.xDepart));\n    let linkEnd = Math.max(record.xArrival, record.xDepart, linkBegin + 1);\n    let range = elevationOccupied.slice(linkBegin, linkEnd + 1);\n    let elevation = range.length ? Math.max(...range) : 10;\n    if (isNaN(elevation) || !Number.isFinite(elevation)) {\n      console.log(\n        \"Bad elevation\",\n        record,\n        linkBegin,\n        linkEnd,\n        range,\n        elevationOccupied\n      );\n    }\n    const stillSmall = true; //elevation < topOffset / 3;\n    elevation += stillSmall ? pixelsPerColumn : pixelsPerColumn / 4;\n    for (let x = linkBegin; x < linkEnd && x < elevationOccupied.length; x++) {\n      elevationOccupied[x] = elevation;\n    }\n    record.elevation = elevation; //storing final value for render\n  }\n  return elevationOccupied;\n}\n","import { Layer, Stage, Text } from \"react-konva\";\nimport React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport PangenomeSchematic from \"./PangenomeSchematic\";\nimport ComponentRect, { compress_visible_rows } from \"./ComponentRect\";\nimport ComponentNucleotides from \"./ComponentNucleotides\";\nimport LinkColumn from \"./LinkColumn\";\nimport LinkArrow from \"./LinkArrow\";\nimport { calculateLinkCoordinates } from \"./LinkRecord\";\nimport NucleotideTooltip from \"./NucleotideTooltip\";\nimport ControlHeader from \"./ControlHeader\";\nimport { observe } from \"mobx\";\nimport {\n  arraysEqual,\n  calculateEndBinFromScreen,\n  stringToColorAndOpacity,\n} from \"./utilities\";\n\n//import makeInspectable from \"mobx-devtools-mst\";\n// TO_DO: improve the management of visualized components\nlet index_to_component_to_visualize_dict;\n\nfunction Legend() {\n  return (\n    <img\n      src={process.env.PUBLIC_URL + \"/Schematize legend.gif\"}\n      alt=\"legend\"\n      style={{\n        position: \"fixed\",\n        bottom: \"20px\",\n        left: \"20px\",\n        background: \"white\",\n        align: \"right\",\n        width: \"100px\",\n        height: \"200px\",\n      }}\n    />\n  );\n}\n\nclass App extends Component {\n  layerRef = React.createRef();\n  layerRef2 = React.createRef(null);\n  // Timer for the LinkArrow highlighting and selection (clicking on it)\n  timerHighlightingLink = null;\n  timerSelectionLink = null;\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      schematize: [],\n      pathNames: [],\n      actualWidth: 1,\n      buttonsHeight: 0,\n    };\n    this.schematic = new PangenomeSchematic({ store: this.props.store }); //Read file, parse nothing\n\n    /* == State control flow --> redundancies here can waste processing time\n    * STEP #1: whenever jsonName changes, loadIndexFile\n    * STEP #2: chunkIndex contents loaded\n    * STEP #3: with new chunkIndex, this.openRelevantChunksFromIndex()\n    * STEP #4: Set switchChunkURLs\n    * STEP #5: once ChunkURLs are listed, go fetchAllChunks\n    * STEP #6: fetched chunks go into loadJsonCache\n    * STEP #7: JsonCache causes processArray to update chunksProcessed\n    * STEP #8: chunksProcessed finishing triggers updateSchematicMetadata with final rendering info for this loaded chunks\n      * STEP #9: reserveAirspace\n      * STEP #10: calcMaxNumRowsAcrossComponents\n    //TODO: separate processArray into its  own observer\n    * STEP #11: Y values calculated, trigger do the render\n    * */\n\n    //Arrays must be observed directly, simple objects are observed by name\n    //STEP #5: once ChunkURLs are listed, go fetchAllChunks\n    observe(this.props.store.chunkURLs, this.fetchAllChunks.bind(this));\n\n    observe(\n      this.props.store,\n      \"useVerticalCompression\",\n      this.updateSchematicMetadata.bind(this)\n    );\n    observe(\n      this.props.store,\n      \"useWidthCompression\",\n      this.openRelevantChunksFromIndex.bind(this)\n    );\n\n    observe(this.props.store, \"useConnector\", this.recalcXLayout.bind(this)); //TODO faster rerender\n\n    observe(\n      this.props.store,\n      \"pixelsPerColumn\",\n      this.openRelevantChunksFromIndex.bind(this)\n    ); //TODO faster rerender\n    observe(this.props.store, \"pixelsPerRow\", this.recalcY.bind(this)); //TODO faster rerender\n\n    //STEP #8: chunksProcessed finishing triggers updateSchematicMetadata with final\n    // rendering info for this loaded chunks\n    observe(\n      this.props.store.chunksProcessed,\n      this.updateSchematicMetadata.bind(this)\n    );\n    observe(\n      this.props.store.chunksProcessedFasta,\n      this.updateSchematicMetadata.bind(this)\n    );\n\n    //STEP #11: Y values calculated, trigger do the render\n    observe(this.props.store, \"loading\", this.render.bind(this));\n\n    //STEP #3: with new chunkIndex, openRelevantChunksFromIndex\n    observe(\n      this.props.store,\n      \"chunkIndex\",\n      this.openRelevantChunksFromIndex.bind(this)\n    );\n\n    observe(\n      this.props.store,\n      \"indexSelectedZoomLevel\",\n      this.openRelevantChunksFromIndex.bind(this) // Whenever the selected zoom level changes\n    );\n    observe(\n      this.props.store.beginEndBin, //user moves start position\n      //This following part is important to scroll right and left on browser\n      () => {\n        console.log(\n          \"Updated Begin and End bin: \" + this.props.store.beginEndBin\n        );\n        this.openRelevantChunksFromIndex();\n      }\n    );\n\n    // For debugging purposes\n    //makeInspectable(this.props.store);\n  }\n\n  prepareWhichComponentsToVisualize(widthInColumns) {\n    //console.log(\"prepareWhichComponentsToVisualize: widthInColumns --> \" + widthInColumns);\n\n    // It prepares a dictionary with the components to visualize. It is improvable putting all the components\n    // in a dictionary (this.schematic.components becames a dictionary).\n\n    index_to_component_to_visualize_dict = {};\n\n    const beginBin = this.props.store.getBeginBin();\n    let newEndBin = this.props.store.getEndBin();\n\n    let firstFieldX = -1;\n\n    for (const schematizeComponent of this.schematic.components) {\n      if (schematizeComponent.lastBin >= beginBin) {\n        const fieldX = schematizeComponent.getColumnX(\n          this.props.store.useWidthCompression\n        );\n\n        if (firstFieldX === -1) {\n          firstFieldX = fieldX;\n\n          // The first component can be partially visualized\n          widthInColumns += this._column_shift(schematizeComponent);\n        }\n\n        /*console.log(\"fieldX: \" + fieldX);\n        console.log('fieldX - firstFieldX: ' + (fieldX - firstFieldX))\n        console.log(\"schematizeComponent.lastBin: \" + schematizeComponent.lastBin);*/\n\n        // If the new component is outside the windows, the preparation is over\n        // TO_DO: take into account the shifted columns in the normal visualization mode (rearrangements + full components)\n        if (fieldX - firstFieldX >= widthInColumns) {\n          break;\n        }\n\n        index_to_component_to_visualize_dict[\n          schematizeComponent.index\n        ] = schematizeComponent;\n\n        newEndBin = schematizeComponent.lastBin;\n      }\n\n      //console.log('newEndBin: ' + newEndBin)\n    }\n\n    //console.log(this.schematic.components.length)\n    //console.log(this.props.store.getBeginBin() + ' - ' + this.props.store.getEndBin())\n    //console.log('index_to_component_to_visualize_dict: '  + Object.keys(index_to_component_to_visualize_dict))\n\n    return newEndBin;\n  }\n\n  /** Compares bin2file @param indexContents with the beginBin and EndBin.\n   * It finds the appropriate chunk URLS from the index and updates\n   * switchChunkURLs which trigger json fetches for the new chunks. **/\n  openRelevantChunksFromIndex() {\n    console.log(\n      \"STEP #3: with new chunkIndex, this.openRelevantChunksFromIndex()\"\n    );\n\n    if (\n      this.props.store.chunkIndex === null ||\n      !this.props.store.chunkIndex.zoom_levels.keys()\n    ) {\n      return; //before the class is fully initialized\n    }\n    const beginBin = this.props.store.getBeginBin();\n\n    // With new chunkIndex, it sets the available zoom levels\n    this.props.store.setAvailableZoomLevels(\n      this.props.store.chunkIndex[\"zoom_levels\"].keys()\n    );\n\n    const widthInColumns = window.innerWidth / this.props.store.pixelsPerColumn;\n\n    const selZoomLev = this.props.store.getSelectedZoomLevel();\n    let [fileArray, fileArrayFasta] = calculateEndBinFromScreen(\n      beginBin,\n      selZoomLev,\n      this.props.store,\n      widthInColumns\n    );\n    this.props.store.setLastBinPangenome(\n      this.props.store.chunkIndex.zoom_levels.get(selZoomLev)[\"last_bin\"]\n    );\n\n    const scaling_factor =\n      this.props.store.getSelectedZoomLevel(true) /\n      this.props.store.getSelectedZoomLevel();\n\n    //console.log(\"scaling_factor: \" + scaling_factor);\n\n    if (scaling_factor !== 1) {\n      this.props.store.updateBeginEndBin(\n        Math.round((beginBin - 1) * scaling_factor),\n        Math.round((this.props.store.getEndBin() - 1) * scaling_factor)\n      );\n      // The updating will re-trigger openRelevantChunksFromIndex\n    } else {\n      const newEndBin = this.prepareWhichComponentsToVisualize(widthInColumns);\n      this.props.store.updateBeginEndBin(beginBin, newEndBin);\n\n      //console.log([selZoomLev, endBin, fileArray, fileArrayFasta]);\n      let URLprefix =\n        process.env.REACT_APP_FETCH +\n        this.props.store.jsonName +\n        \"/\" +\n        selZoomLev +\n        \"/\";\n      fileArray = fileArray.map((filename) => {\n        return URLprefix + filename;\n      });\n      fileArrayFasta = fileArrayFasta.map((filename) => {\n        return URLprefix + filename;\n      });\n\n      this.props.store.switchChunkFastaURLs(fileArrayFasta);\n\n      // If there are no new chunck, it has only to recalculate the X layout\n      if (!this.props.store.switchChunkURLs(fileArray)) {\n        this.recalcXLayout();\n      }\n    }\n  }\n\n  fetchAllChunks() {\n    /*Dispatches fetches for all chunk files\n     * Read https://github.com/graph-genome/Schematize/issues/22 for details\n     */\n    console.log(\"STEP #5: once ChunkURLs are listed, go fetchAllChunks\");\n    //console.log(\"fetchAllChunks\", this.props.store.chunkURLs);\n    if (!this.props.store.chunkURLs.get(0)) {\n      console.warn(\"No chunk URL defined.\");\n      return;\n    }\n    for (let chunkPath of this.props.store.chunkURLs) {\n      //TODO: conditional on jsonCache not already having chunk\n      //console.log(\"fetchAllChunks - START reading: \" + chunkPath);\n      this.schematic.jsonFetch(chunkPath).then((data) => {\n        //console.log(\"fetchAllChunks - END reading: \" + chunkPath);\n        this.schematic.loadJsonCache(chunkPath, data);\n      });\n    }\n  }\n\n  updateSchematicMetadata() {\n    if (\n      arraysEqual(\n        this.props.store.chunkURLs,\n        this.props.store.chunksProcessed\n      ) &&\n      arraysEqual(\n        this.props.store.chunkFastaURLs,\n        this.props.store.chunksProcessedFasta\n      )\n    ) {\n      console.log(\n        \"updateSchematicMetadata #components: \" +\n          this.schematic.components.length\n      );\n      console.log(\n        \"STEP #8: chunksProcessed finishing triggers updateSchematicMetadata with final rendering info for this loaded chunks\"\n      );\n\n      const newEndBin = this.prepareWhichComponentsToVisualize(\n        window.innerWidth / this.props.store.pixelsPerColumn\n      );\n      this.props.store.updateBeginEndBin(\n        this.props.store.getBeginBin(),\n        newEndBin\n      );\n\n      // console.log(this.schematic.components);\n      this.setState(\n        {\n          schematize: this.schematic.components,\n          pathNames: this.schematic.pathNames,\n        },\n        () => {\n          this.recalcXLayout();\n\n          this.compressed_row_mapping = compress_visible_rows(\n            this.schematic.components\n          );\n          this.maxNumRowsAcrossComponents = this.calcMaxNumRowsAcrossComponents(\n            this.schematic.components\n          ); // TODO add this to mobx-state-tree\n          this.props.store.setLoading(false);\n        }\n      );\n    }\n  }\n\n  recalcXLayout() {\n    console.log(\"recalcXLayout\");\n\n    // In this way the updated relativePixelX information is available everywhere for the rendering\n    for (const [\n      i,\n      schematizeComponent,\n    ] of this.schematic.components.entries()) {\n      schematizeComponent.relativePixelX = this.leftXStart(\n        schematizeComponent,\n        i,\n        0,\n        0\n      );\n    }\n\n    let actualWidth = 0;\n    if (Object.values(index_to_component_to_visualize_dict).length > 0) {\n      // The actualWidth is calculated on the visualized components\n\n      const first_visualized_component = Object.values(\n        index_to_component_to_visualize_dict\n      )[0];\n      const last_visualized_component = Object.values(\n        index_to_component_to_visualize_dict\n      )[Object.values(index_to_component_to_visualize_dict).length - 1];\n\n      const columnsInComponents =\n        last_visualized_component.getColumnX(\n          this.props.store.useWidthCompression\n        ) -\n        first_visualized_component.getColumnX(\n          this.props.store.useWidthCompression\n        ) +\n        last_visualized_component.arrivals.length +\n        last_visualized_component.departures.length +\n        (this.props.store.useWidthCompression\n          ? this.props.store.binScalingFactor\n          : last_visualized_component.num_bin) -\n        this._column_shift(first_visualized_component);\n\n      actualWidth = columnsInComponents * this.props.store.pixelsPerColumn;\n      //+ paddingBetweenComponents;\n    }\n\n    this.setState({\n      actualWidth: actualWidth,\n    });\n\n    const [links, top] = calculateLinkCoordinates(\n      this.schematic.components,\n      this.props.store.pixelsPerColumn,\n      this.props.store.topOffset,\n      this.props.store.useWidthCompression,\n      this.props.store.binScalingFactor,\n      this.leftXStart.bind(this),\n      index_to_component_to_visualize_dict\n    );\n    this.distanceSortedLinks = links;\n    this.props.store.updateTopOffset(parseInt(top));\n  }\n\n  recalcY() {\n    // forceUpdate() doesn't work with callback function\n    this.setState({ highlightedLink: null }); // nothing code to force update.\n  }\n\n  calcMaxNumRowsAcrossComponents(components) {\n    let lengths = components.map((x) => {\n      return x.occupants.length;\n    });\n    return Math.max(...lengths); //this should likely be faster than doing a search for true values\n  }\n\n  visibleHeightPixels() {\n    if (index_to_component_to_visualize_dict === undefined) {\n      return 0;\n    }\n\n    if (\n      this.props.store.useVerticalCompression ||\n      !this.compressed_row_mapping\n    ) {\n      // this.state.schematize.forEach(value => Math.max(value.occupants.filter(Boolean).length, maxNumberRowsInOneComponent));\n      if (this.maxNumRowsAcrossComponents === undefined) {\n        this.maxNumRowsAcrossComponents = this.calcMaxNumRowsAcrossComponents(\n          Object.values(index_to_component_to_visualize_dict)\n        );\n      }\n      /*console.log(\n        \"maxNumRowsAcrossComponents\",\n        this.maxNumRowsAcrossComponents\n      );*/\n\n      return (\n        (this.maxNumRowsAcrossComponents + 1) * this.props.store.pixelsPerRow\n      );\n    } else {\n      return (\n        //TODO: NOTE that Object.keys is wrong if you change compressed_row_mapping to a mobx object\n        (Object.keys(this.compressed_row_mapping).length + 0.25) *\n        this.props.store.pixelsPerRow\n      );\n    }\n  }\n\n  componentDidMount = () => {\n    let buttonContainerDiv = document.getElementById(\"button-container\");\n    let clientHeight = buttonContainerDiv.clientHeight;\n\n    const arrowsDiv = document.getElementsByClassName(\"konvajs-content\")[0];\n    arrowsDiv.style.position = \"relative\";\n\n    this.setState({ buttonsHeight: clientHeight });\n\n    this.layerRef.current.getCanvas()._canvas.id = \"cnvs\";\n    this.layerRef.current.getCanvas()._canvas.position = \"relative\";\n\n    this.layerRef2.current.getCanvas()._canvas.id = \"arrow\";\n    this.layerRef2.current.getCanvas()._canvas.position = \"relative\";\n    //this.layerRef2.current.getCanvas()._canvas.style.top = \"95px\";\n    /*if(this.props.store.useVerticalCompression) {\n      this.props.store.resetRenderStats(); //FIXME: should not require two renders to get the correct number\n    }*/\n  };\n\n  // Now it is wrapped in the updateHighlightedNode() function\n  _updateHighlightedNode(linkRect) {\n    this.setState({ highlightedLink: linkRect });\n  }\n\n  // Wrapper function to wrap the logic (no link selected and time delay)\n  updateHighlightedNode = (linkRect) => {\n    // The highlighting has to work only if there isn't any selected link\n    if (!this.state.selectedLink) {\n      if (linkRect != null) {\n        // It comes from an handleMouseOver event\n\n        clearTimeout(this.timerHighlightingLink);\n\n        // To avoid unnecessary rendering when linkRect is still the this.state.highlightedLink link.\n        if (this.state.highlightedLink !== linkRect) {\n          // This ES6 syntaxt avoid to pass the result of the callback to setTimeoutwork.\n          // It works because the ES6 arrow function does not change the context of this.\n          this.timerHighlightingLink = setTimeout(\n            () => {\n              this._updateHighlightedNode(linkRect);\n            },\n            600 // TODO: value to tune. Create a config file where all these hard-coded settings will be\n          );\n        }\n      } else {\n        // It comes from an handleMouseOut event\n\n        clearTimeout(this.timerHighlightingLink);\n\n        // To avoid unnecessary rendering when linkRect == null and this.state.highlightedLink is already null for any reason.\n        if (this.state.highlightedLink != null) {\n          this.timerHighlightingLink = setTimeout(\n            () => {\n              this._updateHighlightedNode(linkRect);\n            },\n            600 // TODO: value to tune. Create a config file where all these hard-coded settings will be\n          );\n        }\n      }\n    }\n  };\n\n  updateSelectedLink = (linkRect) => {\n    console.log(\"updateSelectedLink\");\n\n    let update_state = false;\n\n    if (linkRect) {\n      //TO_DO: lift down this logic when it will be visualized partial chunks (or\n      // pass info about the visualized chunks to the LinkArrow tags)\n      const [binLeft, binRight] = [linkRect.upstream, linkRect.downstream].sort(\n        function (a, b) {\n          return a - b;\n        }\n      );\n\n      /*console.log([linkRect.upstream, linkRect.downstream])\n      console.log(binLeft, binRight)*/\n      if (Object.values(index_to_component_to_visualize_dict).length === 0) {\n        return; //bug: inconsistent state, just cancel the click event\n      }\n      const last_bin_last_visualized_component = Object.values(\n        index_to_component_to_visualize_dict\n      ).slice(-1)[0].lastBin;\n      // if (linkRect !== this.state.selectedLink) //else it is a re-clik on the same link, so do nothing here\n\n      const [beginBin, endBin] = this.props.store.beginEndBin;\n      if (binLeft < beginBin || binRight > last_bin_last_visualized_component) {\n        console.log(\"updateSelectedLink - NewBeginEndBin\");\n\n        const end_closer =\n          Math.abs(beginBin - binLeft) > Math.abs(endBin - binRight);\n\n        let [newBeginBin, newEndBin] = this.props.store.beginEndBin;\n        let screenWidth = endBin - beginBin;\n        let half = Math.floor(screenWidth / 2);\n        if (end_closer) {\n          [newBeginBin, newEndBin] = [binLeft - half, binLeft + half];\n        } else {\n          [newBeginBin, newEndBin] = [binRight - half, binRight + half];\n        }\n\n        this.props.store.updateBeginEndBin(newBeginBin, newEndBin);\n        update_state = true;\n      }\n    }\n\n    clearTimeout(this.timerHighlightingLink);\n\n    // Update the rendering if it is selected a new arrow (or deselected the last one) or\n    // if the range in changed (clicking on a new arrow or recliking on the same one)\n    if (linkRect !== this.selectedLink || update_state) {\n      console.log(\"updateSelectedLink - NewSelection\");\n\n      this.setState({\n        highlightedLink: linkRect,\n        selectedLink: linkRect,\n      });\n    }\n\n    // Auto de-selection after a delay\n    if (linkRect) {\n      console.log(\"Timer deselection\");\n\n      // Eventually restart the timer if it was already ongoing\n      clearTimeout(this.timerSelectionLink);\n\n      this.timerSelectionLink = setTimeout(\n        () => {\n          this.updateSelectedLink(null);\n        },\n        5000 // TODO: to tune. Create a config file where all these hard-coded settings will be\n      );\n    }\n  };\n\n  // Specific utility function to calculate the visualization shift for the first partial visualized component\n  _column_shift(first_visualized_component) {\n    return !this.props.store.useWidthCompression\n      ? first_visualized_component.firstBin === this.props.store.getBeginBin()\n        ? 0\n        : first_visualized_component.arrivals.length +\n          (this.props.store.getBeginBin() - first_visualized_component.firstBin)\n      : 0; // When only rearrangements are shown, the width does not correspond to the number of bin, so for now we avoid any shifting\n  }\n\n  leftXStart(schematizeComponent, i, firstDepartureColumn, j) {\n    // Avoid calling the function too early or for not visualized components\n    if (!(schematizeComponent.index in index_to_component_to_visualize_dict)) {\n      return;\n    }\n\n    //Return the x coordinate pixel that starts the LinkColumn at i, j\n\n    const first_visualized_component = Object.values(\n      index_to_component_to_visualize_dict\n    )[0];\n\n    /*\n    - \"schematizeComponent.getColumnX(...) - first_visualized_component.getColumnX(..)\": offset of the current component respect to the first visualized one\n    - \"this._column_shift(first_visualized_component)\"\": to hide the arrow on the left\n    - \"(schematizeComponent.index - this.schematic.components[0].index\": number of padding white columns\n    */\n    const previousColumns =\n      schematizeComponent.getColumnX(this.props.store.useWidthCompression) -\n      first_visualized_component.getColumnX(\n        this.props.store.useWidthCompression\n      ) -\n      this._column_shift(first_visualized_component) -\n      (schematizeComponent.index - this.schematic.components[0].index);\n\n    const pixelsFromColumns =\n      (previousColumns + firstDepartureColumn + j) *\n      this.props.store.pixelsPerColumn;\n\n    return pixelsFromColumns + i * this.props.store.pixelsPerColumn;\n  }\n\n  renderComponent(schematizeComponent, i, pathNames) {\n    return (\n      <>\n        <ComponentRect\n          store={this.props.store}\n          item={schematizeComponent}\n          key={\"r\" + i}\n          height={this.visibleHeightPixels()}\n          widthInColumns={\n            schematizeComponent.arrivals.length +\n            (this.props.store.useWidthCompression\n              ? this.props.store.binScalingFactor\n              : schematizeComponent.num_bin) +\n            (schematizeComponent.departures.length - 1)\n          }\n          compressed_row_mapping={this.compressed_row_mapping}\n          pathNames={pathNames}\n        />\n\n        {schematizeComponent.arrivals.map((linkColumn, j) => {\n          return this.renderLinkColumn(\n            schematizeComponent,\n            i,\n            0,\n            j,\n            linkColumn\n          );\n        })}\n        {schematizeComponent.departures.slice(0, -1).map((linkColumn, j) => {\n          let leftPad =\n            schematizeComponent.arrivals.length +\n            (this.props.store.useWidthCompression\n              ? this.props.store.binScalingFactor\n              : schematizeComponent.num_bin);\n\n          return this.renderLinkColumn(\n            schematizeComponent,\n            i,\n            leftPad,\n            j,\n            linkColumn\n          );\n        })}\n      </>\n    );\n  }\n\n  renderLinkColumn(\n    schematizeComponent,\n    i,\n    firstDepartureColumn,\n    j,\n    linkColumn\n  ) {\n    const xCoordArrival = this.leftXStart(\n      schematizeComponent,\n      i,\n      firstDepartureColumn,\n      j\n    );\n    const [localColor, localOpacity, localStroke] = stringToColorAndOpacity(\n      linkColumn,\n      this.state.highlightedLink,\n      this.state.selectedLink\n    );\n    return (\n      <LinkColumn\n        store={this.props.store}\n        key={\"departure\" + i + j}\n        item={linkColumn}\n        pathNames={this.state.pathNames}\n        x={xCoordArrival}\n        pixelsPerRow={this.props.store.pixelsPerRow}\n        width={this.props.store.pixelsPerColumn}\n        color={localColor}\n        opacity={localOpacity}\n        stroke={localStroke}\n        updateHighlightedNode={this.updateHighlightedNode}\n        compressed_row_mapping={this.compressed_row_mapping}\n      />\n    );\n  }\n\n  renderLink(link) {\n    const [localColor, localOpacity] = stringToColorAndOpacity(\n      link.linkColumn,\n      this.state.highlightedLink,\n      this.state.selectedLink\n    );\n\n    return (\n      <LinkArrow\n        store={this.props.store}\n        key={\"arrow\" + link.linkColumn.key}\n        link={link}\n        color={localColor}\n        opacity={localOpacity}\n        updateHighlightedNode={this.updateHighlightedNode}\n        updateSelectedLink={this.updateSelectedLink}\n      />\n    );\n  }\n\n  renderNucleotidesSchematic = () => {\n    if (\n      !this.props.store.loading &&\n      // The conditions on binWidht and useWidthCompression are lifted here,\n      // avoiding any computation if nucleotides have not to be visualized.\n      this.props.store.getBinWidth() === 1 &&\n      !this.props.store.useWidthCompression &&\n      this.props.store.pixelsPerColumn >= 10 &&\n      this.schematic.nucleotides.length > 0\n    ) {\n      //console.log('renderNucleotidesSchematic - START')\n      return Object.values(index_to_component_to_visualize_dict).map(\n        (schematizeComponent, i) => {\n          // The dummy component (firstBin and lastBin equal to 0) is not loaded in this.schematic.components, but there is a nucleotide for it in the FASTA file.\n          // If the first component has firstBin == 1, then in the FASTA there is a nucleotide not visualized, so the shift start from 0, and not 1\n          const nt_shift = this.schematic.components[0].firstBin || 1;\n\n          const nucleotides_slice = this.schematic.nucleotides.slice(\n            schematizeComponent.firstBin - nt_shift, // firstBin is 1 indexed, but this is canceled by nt_shift\n            schematizeComponent.lastBin - nt_shift + 1 // inclusive end\n          );\n\n          //console.log(\"nucleotides_slice: \" + nucleotides_slice);\n\n          return (\n            <React.Fragment key={\"nt\" + i}>\n              <ComponentNucleotides\n                store={this.props.store}\n                item={schematizeComponent}\n                key={i}\n                // They are passed only the nucleotides associated to the current component\n                nucleotides={nucleotides_slice}\n              />\n            </React.Fragment>\n          );\n        }\n      );\n    }\n  };\n\n  renderSchematic() {\n    console.log(\"renderSchematic\");\n\n    if (this.props.store.loading) {\n      return;\n    }\n\n    return this.schematic.components.map((schematizeComponent, i) => {\n      if (schematizeComponent.index in index_to_component_to_visualize_dict) {\n        return (\n          <React.Fragment key={\"f\" + i}>\n            {this.renderComponent(schematizeComponent, i, this.state.pathNames)}\n          </React.Fragment>\n        );\n      } else {\n        return null;\n      }\n    });\n  }\n\n  renderSortedLinks() {\n    if (this.props.store.loading) {\n      return;\n    }\n\n    return this.distanceSortedLinks.map((record, i) => {\n      return this.renderLink(record);\n    });\n  }\n\n  loadingMessage() {\n    if (this.props.store.loading) {\n      return (\n        <Text\n          key=\"loading\"\n          y={100}\n          fontSize={60}\n          width={300}\n          align=\"center\"\n          text=\"Loading...\"\n        />\n      );\n    }\n  }\n\n  render() {\n    console.log(\"Start render\");\n\n    //console.log('renderNucleotidesSchematic - START')\n\n    return (\n      <>\n        <div\n          style={{\n            position: \"sticky\",\n            top: 0,\n            zIndex: \"2\",\n            background: \"white\",\n\n            // To keep the matrix under the container with the vertical scrolling\n            // when the matrix is larger than the page\n            width: this.state.actualWidth,\n\n            // To avoid width too low with large bin_width\n            minWidth: \"100%\",\n          }}\n        >\n          <ControlHeader store={this.props.store} schematic={this.schematic} />\n\n          <Stage\n            x={this.props.store.leftOffset}\n            y={this.props.topOffset}\n            width={this.state.actualWidth}\n            height={this.props.store.topOffset}\n          >\n            <Layer ref={this.layerRef2}>\n              {this.renderSortedLinks()}\n              {this.renderNucleotidesSchematic()}\n            </Layer>\n          </Stage>\n        </div>\n\n        <Stage\n          x={this.props.store.leftOffset} // removed leftOffset to simplify code. Relative coordinates are always better.\n          y={-this.props.store.topOffset} // For some reason, I have to put this, but I'd like to put 0\n          width={this.state.actualWidth}\n          height={this.visibleHeightPixels() + this.props.store.pixelsPerColumn}\n        >\n          <Layer ref={this.layerRef}>\n            {this.loadingMessage()}\n            {this.renderSchematic()}\n          </Layer>\n        </Stage>\n\n        <NucleotideTooltip store={this.props.store} />\n        <Legend store={this.props.store} />\n      </>\n    );\n  }\n}\n\n// render(<App />, document.getElementById('root'));\n\nexport default App;\n","import React from \"react\";\nimport MouseTooltip from \"react-sticky-mouse-tooltip\";\nimport {Observer} from \"mobx-react\";\nimport PropTypes from \"prop-types\";\n\nexport default class NucleotideTooltip extends React.Component {\n  render() {\n    return (\n      <MouseTooltip\n          visible={true}\n          offsetX={15}\n          offsetY={-20}\n          style={{background: \"white\", zIndex: 4, \"whiteSpace\": \"pre-line\"}}\n      >\n        <Observer>\n          {() => <span>{this.props.store.cellToolTipContent}</span>}\n        </Observer>\n      </MouseTooltip>\n    );\n  }\n}\n\nNucleotideTooltip.propTypes = {\n  store: PropTypes.object,\n};\n","import React from \"react\";\nimport { Observer } from \"mobx-react\";\nimport { httpGetAsync } from \"./URL\";\nimport PropTypes from \"prop-types\";\nimport \"./App.css\";\n\nclass ControlHeader extends React.Component {\n  shift(percentage) {\n    const beginBin = this.props.store.getBeginBin();\n    const endBin = this.props.store.getEndBin();\n    let size = endBin - beginBin;\n    let diff = Math.floor(size * (percentage / 100));\n    console.log(endBin + \"-\" + beginBin + \"=\" + size + \" --> diff: \" + diff);\n    this.props.store.updateBeginEndBin(beginBin + diff, endBin + diff);\n  }\n\n  handleJump() {\n    console.log(\n      \"JUMP: path name: \" +\n        this.props.store.pathNucPos.path +\n        \" nucleotide position: \" +\n        this.props.store.pathNucPos.nucPos\n    );\n    // I don't know why, but in order for the CORS headers to exchange we need to make a first GET request to \"/hi\" which will not return anything\n\n    const store = this.props.store;\n    const addr = store.pathIndexServerAddress;\n    const path_name = store.pathNucPos.path;\n    const nuc_pos = store.pathNucPos.nucPos;\n\n    function handleOdgiServerResponse(result) {\n      if (result === \"0\") {\n        alert(\n          \"The jump query returned 0. Either your path does not exist or your position in the path is wrong. Please try again.\"\n        );\n      } else {\n        console.log(result);\n        // go from nucleotide position to bin\n        result = parseInt(result);\n        const newBeginBin = Math.ceil(result / store.getBinWidth());\n        console.log(newBeginBin);\n        store.updateBeginEndBin(newBeginBin, store.getEndBin());\n      }\n    }\n    // httpGetAsync(addr + \"hi\", printResult);\n    // httpGetAsync(addr + \"5/1\", printResult);\n    // httpGetAsync(addr + \"4/3\", printResult);\n    httpGetAsync(addr + path_name + \"/\" + nuc_pos, handleOdgiServerResponse);\n  }\n\n  change_zoom_level(target) {\n    console.log(\n      \"change_zoom_level: \" +\n        target.value +\n        \" ---\" +\n        target.options[target.selectedIndex].text\n    );\n\n    this.props.store.setIndexSelectedZoomLevel(parseInt(target.value));\n  }\n\n  decIndexSelectedZoomLevel() {\n    let indexSelZoomLevel = this.props.store.indexSelectedZoomLevel;\n    if (indexSelZoomLevel > 0) {\n      this.props.store.setIndexSelectedZoomLevel(indexSelZoomLevel - 1);\n    }\n  }\n\n  incIndexSelectedZoomLevel() {\n    let indexSelZoomLevel = this.props.store.indexSelectedZoomLevel;\n    if (indexSelZoomLevel < this.props.store.availableZoomLevels.length - 1) {\n      this.props.store.setIndexSelectedZoomLevel(indexSelZoomLevel + 1);\n    }\n  }\n\n  render() {\n    let showJumpPath = true; // TODO: unlock once the data is there\n    let pathRow = null;\n    if (showJumpPath) {\n      pathRow = (\n        <div className={\"row\"}>\n          Jump to path at nucleotide position:\n          <input\n            type=\"string\"\n            list=\"path\"\n            placeholder={\"path\"}\n            onChange={(event) =>\n              this.props.store.updatePathNucPos(\n                event.target.value,\n                this.props.store.pathNucPos.nucPos\n              )\n            }\n            style={{ width: \"80px\" }}\n          />\n          <datalist id=\"path\">\n            {this.props.schematic.pathNames.map((item, key) => (\n              <option key={key} value={item} />\n            ))}\n          </datalist>\n          -\n          <input\n            type=\"number\"\n            placeholder={\"position\"}\n            onChange={(event) =>\n              this.props.store.updatePathNucPos(\n                this.props.store.pathNucPos.path,\n                event.target.value\n              )\n            }\n            style={{ width: \"80px\" }}\n          />\n          <span style={{ marginLeft: \"2px\" }}>\n            <button className=\"button\" onClick={() => this.handleJump()}>\n              Jump\n            </button>\n          </span>\n        </div>\n      );\n    }\n\n    return (\n      <div id=\"button-container\">\n        {/*<button className=\"button\" id=\"btn-download\">*/}\n        {/*  Save Image*/}\n        {/*</button>*/}\n        <input\n          type=\"text\"\n          defaultValue={this.props.store.jsonName}\n          style={{ width: \"330px\" }}\n          onChange={this.props.store.tryJSONpath}\n          title={\"File:\"}\n        />\n        <span style={{ marginLeft: \"30px\" }}>\n          <Observer>\n            {() => (\n              <>\n                Bin width:\n                <button\n                  className=\"button\"\n                  onClick={() => this.decIndexSelectedZoomLevel()}\n                >\n                  -\n                </button>\n                <select\n                  id=\"select_bin_width\"\n                  onChange={(val) => this.change_zoom_level(val.target)}\n                  value={this.props.store.indexSelectedZoomLevel}\n                >\n                  {this.props.store.availableZoomLevels.map((item, i) => (\n                    <option key={i} value={i}>\n                      {item}\n                    </option>\n                  ))}\n                </select>\n                <button\n                  className=\"button\"\n                  onClick={() => this.incIndexSelectedZoomLevel()}\n                >\n                  +\n                </button>\n              </>\n            )}\n          </Observer>\n        </span>\n\n        <span style={{ marginLeft: \"30px\" }}>\n          <button className=\"button\" onClick={() => this.shift(-100)}>\n            &lt;&lt;\n          </button>\n          <button className=\"button\" onClick={() => this.shift(-50)}>\n            &lt;\n          </button>\n          Pangenome Bin Position:\n          <Observer>\n            {() => (\n              <>\n                <input\n                  type=\"number\"\n                  value={this.props.store.beginEndBin[0]} // TODO Get methods don't work here, but I don't know why. Need to ask Robert Buels.\n                  onChange={(event) =>\n                    this.props.store.updateBeginEndBin(\n                      event.target.value,\n                      this.props.store.getEndBin()\n                    )\n                  }\n                  style={{ width: \"80px\" }}\n                />\n                -\n                <input\n                  type=\"number\"\n                  value={this.props.store.beginEndBin[1]}\n                  readOnly\n                  style={{ width: \"80px\" }}\n                />\n              </>\n            )}\n          </Observer>\n          <button className=\"button\" onClick={() => this.shift(50)}>\n            &gt;\n          </button>\n          <button className=\"button\" onClick={() => this.shift(100)}>\n            &gt;&gt;\n          </button>\n        </span>\n        <div className={\"row\"}>\n          Jump to path at nucleotide position:\n          <span className=\"myarrow\">\n            <input\n              type=\"string\"\n              list=\"path\"\n              name=\"path\"\n              placeholder={\"path\"}\n              id=\"#show-suggestions\"\n              onChange={(event) =>\n                this.props.store.updatePathNucPos(\n                  event.target.value,\n                  this.props.store.pathNucPos.nucPos\n                )\n              }\n              style={{ width: \"80px\" }}\n            />\n          </span>\n          <datalist id=\"path\">\n            {this.props.schematic.pathNames.map((item, key) => (\n              <option key={key} value={item} />\n            ))}\n          </datalist>\n          -\n          <input\n            type=\"number\"\n            placeholder={\"position\"}\n            onChange={(event) =>\n              this.props.store.updatePathNucPos(\n                this.props.store.pathNucPos.path,\n                event.target.value\n              )\n            }\n            style={{ width: \"80px\" }}\n          />\n          <span style={{ marginLeft: \"2px\" }}>\n            <button className=\"button\" onClick={() => this.handleJump()}>\n              Jump\n            </button>\n          </span>\n          <span style={{ marginLeft: \"30px\" }}>\n            Pangenome Last Bin: {this.props.store.last_bin_pangenome}\n          </span>\n          <span style={{ marginLeft: \"30px\" }}>\n            Num. of individuals: {this.props.schematic.pathNames.length}\n          </span>\n        </div>\n        <div className={\"row\"}>\n          <span>\n            {\" \"}\n            Allele Frequency Histogram:\n            <VerticalCompressedViewSwitch store={this.props.store} />\n          </span>\n          <span>\n            {\" \"}\n            Show Only Rearrangements:\n            <WidthCompressedViewSwitch store={this.props.store} />\n          </span>\n          {this.props.store.useWidthCompression ? (\n            <React.Fragment>\n              <span>\n                {\" \"}\n                Render Connectors:\n                <RenderConnectorSwitch store={this.props.store} />\n              </span>\n            </React.Fragment>\n          ) : (\n            <></>\n          )}\n          <span>\n            {\" \"}\n            Row Height:\n            <Observer>\n              {() => (\n                <input\n                  type=\"number\"\n                  min={1}\n                  value={this.props.store.pixelsPerRow}\n                  onChange={this.props.store.updateHeight}\n                  style={{ width: \"30px\" }}\n                />\n              )}\n            </Observer>\n          </span>\n          <span>\n            {\" \"}\n            Column Width:\n            <input\n              type=\"number\"\n              min={1}\n              value={this.props.store.pixelsPerColumn}\n              onChange={this.props.store.updateWidth}\n              style={{ width: \"30px\" }}\n            />\n          </span>\n          <span>\n            &nbsp;\n            <a\n              href={\"https://github.com/graph-genome/Schematize/wiki\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <strong>Pantograph Tutorial</strong>\n            </a>\n          </span>\n          <span>\n            &nbsp; &nbsp; &nbsp;\n            <a\n              href={\"http://covid-19.genenetwork.org/\"}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <strong>Source Dataset</strong>\n            </a>\n          </span>\n        </div>\n      </div>\n    );\n  }\n}\n\nControlHeader.propTypes = {\n  store: PropTypes.object,\n};\n\nclass VerticalCompressedViewSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useVerticalCompression}\n            onChange={this.props.store.toggleUseVerticalCompression}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nVerticalCompressedViewSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nclass RenderConnectorSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useConnector}\n            onChange={this.props.store.toggleUseConnector}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nRenderConnectorSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nclass WidthCompressedViewSwitch extends React.Component {\n  render() {\n    return (\n      <Observer>\n        {() => (\n          <input\n            type=\"checkbox\"\n            checked={this.props.store.useWidthCompression}\n            onChange={this.props.store.toggleUseWidthCompression}\n          />\n        )}\n      </Observer>\n    );\n  }\n}\n\nWidthCompressedViewSwitch.propTypes = {\n  store: PropTypes.object,\n};\n\nexport default ControlHeader;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import { types } from \"mobx-state-tree\";\nimport { urlExists } from \"./URL\";\nimport { arraysEqual, checkAndForceMinOrMaxValue, isInt } from \"./utilities\";\n\nconst Chunk = types.model({\n  file: types.string,\n  fasta: types.maybeNull(types.string),\n  first_bin: types.integer,\n  last_bin: types.integer,\n  x: types.integer,\n  compressedX: types.integer,\n});\nconst ZoomLevel = types.model({\n  bin_width: types.integer,\n  last_bin: types.integer,\n  files: types.array(Chunk),\n});\nconst ChunkIndex = types.maybeNull(\n  types.model({\n    json_version: 14,\n    pangenome_length: types.integer,\n    zoom_levels: types.map(ZoomLevel),\n  })\n);\nconst PathNucPos = types.model(\"PathNucPos\", {\n  path: types.string,\n  nucPos: types.integer,\n});\n\nlet RootStore;\nRootStore = types\n  .model({\n    chunkIndex: ChunkIndex,\n    beginEndBin: types.optional(types.array(types.integer), [1, 100]),\n    useVerticalCompression: false,\n    useWidthCompression: false,\n    binScalingFactor: 3,\n    useConnector: true,\n    pixelsPerColumn: 10,\n    pixelsPerRow: 3,\n    leftOffset: 1,\n    topOffset: 400,\n    highlightedLink: 0, // we will compare linkColumns\n    maximumHeightThisFrame: 150,\n    cellToolTipContent: \"\",\n    jsonName: \"SARS-CoV-b\",\n    // Added attributes for the zoom level management\n    availableZoomLevels: types.optional(types.array(types.string), [\"1\"]),\n\n    precIndexSelectedZoomLevel: 0,\n    indexSelectedZoomLevel: 0,\n\n    chunkURLs: types.optional(types.array(types.string), []),\n    chunkFastaURLs: types.optional(types.array(types.string), []),\n    //to be compared against chunkURLs\n    chunksProcessed: types.optional(types.array(types.string), []),\n    chunksProcessedFasta: types.optional(types.array(types.string), []),\n\n    pathNucPos: types.optional(PathNucPos, { path: \"path\", nucPos: 0 }), // OR: types.maybe(PathNucPos)\n    pathIndexServerAddress: \"https://pantograph.lugli.arvadosapi.com/hi\",\n\n    loading: true,\n    copyNumberColorArray: types.optional(types.array(types.string), [\n      \"#6a6a6a\",\n      \"#5f5f5f\",\n      \"#545454\",\n      \"#4a4a4a\",\n      \"#3f3f3f\",\n      \"#353535\",\n      \"#2a2a2a\",\n      \"#1f1f1f\",\n      \"#151515\",\n      \"#0a0a0a\",\n      \"#000000\",\n    ]),\n    invertedColorArray: types.optional(types.array(types.string), [\n      \"#de4b39\",\n      \"#c74333\",\n      \"#b13c2d\",\n      \"#9b3427\",\n      \"#852d22\",\n      \"#6f251c\",\n      \"#581e16\",\n      \"#421611\",\n      \"#2c0f0b\",\n      \"#160705\",\n      \"#000000\",\n    ]),\n\n    last_bin_pangenome: 0,\n  })\n  .actions((self) => {\n    function setChunkIndex(json) {\n      console.log(\"STEP #2: chunkIndex contents loaded\");\n      //console.log(\"Index updated with content:\", json);\n\n      self.chunkIndex = null; // TODO: TEMPORARY HACK before understanding more in depth mobx-state or change approach\n\n      self.chunkIndex = json;\n    }\n    function updateBeginEndBin(newBegin, newEnd) {\n      /*This method needs to be atomic to avoid spurious updates and out of date validation.*/\n\n      console.log(\"updateBeginEndBin - \" + newBegin + \" - \" + newEnd);\n\n      // Sometimes, typing new bin, it arrives something that is not a valid integer\n      if (!isInt(newBegin) || !isInt(newEnd)) {\n        newBegin = 1;\n        newEnd = 100;\n      }\n\n      // TODO: manage a maxBeginBin based on the width of the last components in the pangenome\n      newBegin = Math.min(\n        self.last_bin_pangenome - 1,\n        Math.max(1, Math.round(newBegin))\n      );\n\n      setBeginEndBin(newBegin, newEnd);\n    }\n    function updateTopOffset(newTopOffset) {\n      if (Number.isFinite(newTopOffset) && Number.isSafeInteger(newTopOffset)) {\n        self.topOffset = newTopOffset + 10;\n      }\n    }\n    function updateBinScalingFactor(event) {\n      let newFactor = event.target.value;\n      self.binScalingFactor = Math.max(1, Number(newFactor));\n    }\n    function updateHighlightedLink(linkRect) {\n      self.highlightedLink = linkRect;\n    }\n    function updateMaxHeight(latestHeight) {\n      self.maximumHeightThisFrame = Math.max(\n        self.maximumHeightThisFrame,\n        latestHeight\n      );\n    }\n    function resetRenderStats() {\n      self.maximumHeightThisFrame = 1;\n    }\n    function updateCellTooltipContent(newContents) {\n      self.cellToolTipContent = String(newContents);\n    }\n    function toggleUseVerticalCompression() {\n      self.useVerticalCompression = !self.useVerticalCompression;\n    }\n    function toggleUseWidthCompression() {\n      self.useWidthCompression = !self.useWidthCompression;\n    }\n    function toggleUseConnector() {\n      self.useConnector = !self.useConnector;\n    }\n    function updateHeight(event) {\n      self.pixelsPerRow = checkAndForceMinOrMaxValue(\n        Number(event.target.value),\n        1,\n        30\n      );\n    }\n    function updateWidth(event) {\n      self.pixelsPerColumn = checkAndForceMinOrMaxValue(\n        Number(event.target.value),\n        3,\n        30\n      );\n    }\n\n    function tryJSONpath(event) {\n      const url =\n        process.env.REACT_APP_FETCH + event.target.value + \"/bin2file.json\";\n      if (urlExists(url)) {\n        console.log(\"STEP#1: New Data Source: \" + event.target.value);\n        self.jsonName = event.target.value;\n      }\n    }\n\n    // Lifted down the control of the emptyness of the arrays\n    function switchChunkURLs(arrayOfFile) {\n      if (!arraysEqual(arrayOfFile, self.chunkURLs)) {\n        console.log(\"STEP #4: Set switchChunkURLs: \" + arrayOfFile);\n        self.chunkURLs = arrayOfFile;\n\n        self.chunksProcessed = []; // Clear\n\n        return true;\n      }\n      return false;\n    }\n    function switchChunkFastaURLs(arrayOfFile) {\n      if (!arraysEqual(arrayOfFile, self.chunkFastaURLs)) {\n        console.log(\"STEP #4.fasta: Set switchChunkFastaURLs: \" + arrayOfFile);\n        self.chunkFastaURLs = arrayOfFile;\n\n        self.chunksProcessedFasta = []; // Clear\n      }\n    }\n    function addChunkProcessed(singleChunk) {\n      console.log(\"STEP #7: processed \" + singleChunk);\n      self.chunksProcessed.push(singleChunk);\n    }\n    function addChunkProcessedFasta(singleChunkFasta) {\n      console.log(\"STEP #7.FASTA: processed \" + singleChunkFasta);\n      self.chunksProcessedFasta.push(singleChunkFasta);\n    }\n    function getBeginBin() {\n      return self.beginEndBin[0];\n    }\n    function getEndBin() {\n      return self.beginEndBin[1];\n    }\n\n    // Getter and setter for zoom info management\n    function getBinWidth() {\n      //Zoom level and BinWidth are actually the same thing\n      return Number(self.getSelectedZoomLevel());\n    }\n    function getSelectedZoomLevel(get_prec_zoom_level = false) {\n      //This is a genuinely useful getter\n      let a =\n        self.availableZoomLevels[\n          get_prec_zoom_level\n            ? self.precIndexSelectedZoomLevel\n            : self.indexSelectedZoomLevel\n        ];\n\n      // Clear precIndexSelectedZoomLevel (it is usable only one time)\n      if (get_prec_zoom_level) {\n        self.precIndexSelectedZoomLevel = self.indexSelectedZoomLevel;\n      }\n\n      return a ? a : \"1\";\n    }\n    function setIndexSelectedZoomLevel(index) {\n      self.precIndexSelectedZoomLevel = self.indexSelectedZoomLevel;\n      self.indexSelectedZoomLevel = index;\n    }\n\n    function setAvailableZoomLevels(availableZoomLevels) {\n      let arr = [...availableZoomLevels];\n\n      self.availableZoomLevels = arr;\n    }\n\n    function setBeginEndBin(newBeginBin, newEndBin) {\n      self.beginEndBin = [newBeginBin, newEndBin];\n    }\n    function updatePathNucPos(path, nucPos) {\n      //console.log('updatePathNucPos: ' + path + ' --- ' + nucPos)\n\n      if (path !== undefined) {\n        if (nucPos) {\n          nucPos = Math.abs(parseInt(nucPos));\n        } else {\n          nucPos = 0;\n        }\n        self.pathNucPos = { path: path, nucPos: nucPos };\n      }\n    }\n\n    function setLoading(val) {\n      self.loading = val;\n    }\n    function setLastBinPangenome(val) {\n      self.last_bin_pangenome = val;\n    }\n    return {\n      setChunkIndex,\n      updateBeginEndBin,\n      updateTopOffset,\n      updateHighlightedLink,\n      updateMaxHeight,\n      resetRenderStats,\n      updateCellTooltipContent,\n      updateBinScalingFactor,\n      toggleUseVerticalCompression,\n      toggleUseWidthCompression,\n      toggleUseConnector,\n      updateHeight,\n      updateWidth,\n      tryJSONpath,\n\n      switchChunkURLs,\n      switchChunkFastaURLs,\n      addChunkProcessed,\n      addChunkProcessedFasta,\n\n      getBeginBin,\n      getEndBin,\n      updatePathNucPos,\n\n      //NOTE: DO NOT ADD GETTERS here.  They are not necessary in mobx.\n      // You can reference store.val directly without store.getVal()\n      //Only write getters to encapsulate useful logic for derived values\n\n      // Added zoom actions\n      getBinWidth,\n      getSelectedZoomLevel,\n      setIndexSelectedZoomLevel,\n      setAvailableZoomLevels,\n\n      setLoading,\n\n      setLastBinPangenome,\n    };\n  })\n  .views((self) => ({}));\n\nexport const store = RootStore.create({});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./ViewportInputsStore\";\n\nReactDOM.render(<App store={store} />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}